{
  "files": [
    {
      "path": "packages/templates/express/src/lib/paypal.ts",
      "target": "src/lib/paypal.ts",
      "content": "import { PayPalSDK } from '@paypal/paypal-server-sdk';\n\n/**\n * PayPal SDK configuration\n * \n * This file sets up the PayPal client with the appropriate environment\n * based on the PAYPAL_ENV environment variable.\n */\n\n// Create PayPal client\nconst paypalClient = new PayPalSDK({\n  clientId: process.env.PAYPAL_CLIENT_ID || '',\n  clientSecret: process.env.PAYPAL_CLIENT_SECRET || '',\n  environment: process.env.PAYPAL_ENV === 'live' ? 'live' : 'sandbox',\n});\n\n/**\n * Create a PayPal order\n * \n * @param amount - The amount to charge\n * @param currency - The currency code (e.g., 'USD')\n * @param description - Description of the purchase\n * @returns Promise resolving to the order ID\n */\nexport const createPayPalOrder = async (\n  amount: string,\n  currency: string = 'USD',\n  description: string = 'BillingSDK Purchase'\n) => {\n  try {\n    const order = await paypalClient.createOrder({\n      intent: 'CAPTURE',\n      purchase_units: [\n        {\n          description,\n          amount: {\n            currency_code: currency,\n            value: amount,\n          },\n        },\n      ],\n      application_context: {\n        cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/cancel`,\n        return_url: `${process.env.NEXT_PUBLIC_APP_URL}/return`,\n      },\n    });\n    \n    return order.id;\n  } catch (error) {\n    console.error('Error creating PayPal order:', error);\n    throw error;\n  }\n};\n\n/**\n * Capture a PayPal order\n * \n * @param orderId - The PayPal order ID to capture\n * @returns Promise resolving to the capture result\n */\nexport const capturePayPalOrder = async (orderId: string) => {\n  try {\n    const capture = await paypalClient.capturePaymentForOrder(orderId);\n    return capture;\n  } catch (error) {\n    console.error('Error capturing PayPal order:', error);\n    throw error;\n  }\n};\n\n/**\n * Get order details\n * \n * @param orderId - The PayPal order ID to retrieve\n * @returns Promise resolving to the order details\n */\nexport const getPayPalOrder = async (orderId: string) => {\n  try {\n    const order = await paypalClient.getOrder(orderId);\n    return order;\n  } catch (error) {\n    console.error('Error retrieving PayPal order:', error);\n    throw error;\n  }\n};"
    },
    {
      "path": "packages/templates/express/src/routes/paypal/route.ts",
      "target": "src/routes/paypal/route.ts",
      "content": "import { Router } from 'express';\nimport { createPayPalOrder, capturePayPalOrder, getPayPalOrder } from '../lib/paypal';\n\nconst paypalRouter = Router();\n\n/**\n * Create a PayPal order\n * POST /paypal/order\n * \n * Request body:\n * - amount: string (required)\n * - currency: string (optional, defaults to 'USD')\n * - description: string (optional)\n */\npaypalRouter.post('/order', async (req, res) => {\n  try {\n    const { amount, currency, description } = req.body;\n    \n    if (!amount) {\n      return res.status(400).json({ error: 'Amount is required' });\n    }\n    \n    const orderId = await createPayPalOrder(amount, currency, description);\n    res.status(200).json({ orderId });\n  } catch (error) {\n    console.error('Error creating PayPal order:', error);\n    res.status(500).json({ error: 'Failed to create PayPal order' });\n  }\n});\n\n/**\n * Capture a PayPal order\n * POST /paypal/order/:orderId/capture\n * \n * Path parameters:\n * - orderId: string (required)\n */\npaypalRouter.post('/order/:orderId/capture', async (req, res) => {\n  try {\n    const { orderId } = req.params;\n    \n    if (!orderId) {\n      return res.status(400).json({ error: 'Order ID is required' });\n    }\n    \n    const capture = await capturePayPalOrder(orderId);\n    res.status(200).json(capture);\n  } catch (error) {\n    console.error('Error capturing PayPal order:', error);\n    res.status(500).json({ error: 'Failed to capture PayPal order' });\n  }\n});\n\n/**\n * Get PayPal order details\n * GET /paypal/order/:orderId\n * \n * Path parameters:\n * - orderId: string (required)\n */\npaypalRouter.get('/order/:orderId', async (req, res) => {\n  try {\n    const { orderId } = req.params;\n    \n    if (!orderId) {\n      return res.status(400).json({ error: 'Order ID is required' });\n    }\n    \n    const order = await getPayPalOrder(orderId);\n    res.status(200).json(order);\n  } catch (error) {\n    console.error('Error retrieving PayPal order:', error);\n    res.status(500).json({ error: 'Failed to retrieve PayPal order' });\n  }\n});\n\nexport default paypalRouter;"
    },
    {
      "path": "packages/templates/express/src/routes/paypal/checkout.ts",
      "target": "src/routes/paypal/checkout.ts",
      "content": "/**\n * PayPal Checkout Routes\n * \n * This file contains routes for handling PayPal checkout flows.\n * These routes are designed to work with the PayPal JavaScript SDK on the frontend.\n */\n\nimport { Router } from 'express';\nimport { createPayPalOrder } from '../lib/paypal';\n\nconst checkoutRouter = Router();\n\n/**\n * Create a PayPal order for checkout\n * POST /paypal/checkout\n * \n * This endpoint is called by the frontend to create a PayPal order\n * before redirecting the user to PayPal for approval.\n * \n * Request body:\n * - amount: string (required)\n * - currency: string (optional, defaults to 'USD')\n * - description: string (optional)\n */\ncheckoutRouter.post('/', async (req, res) => {\n  try {\n    const { amount, currency = 'USD', description = 'BillingSDK Purchase' } = req.body;\n    \n    if (!amount) {\n      return res.status(400).json({ error: 'Amount is required' });\n    }\n    \n    const orderId = await createPayPalOrder(amount, currency, description);\n    res.status(200).json({ id: orderId });\n  } catch (error) {\n    console.error('Error creating PayPal checkout order:', error);\n    res.status(500).json({ error: 'Failed to create PayPal checkout order' });\n  }\n});\n\nexport default checkoutRouter;"
    },
    {
      "path": "packages/templates/express/src/routes/paypal/order.ts",
      "target": "src/routes/paypal/order.ts",
      "content": "/**\n * PayPal Order Management Routes\n * \n * This file contains routes for managing PayPal orders.\n */\n\nimport { Router } from 'express';\nimport { createPayPalOrder, capturePayPalOrder, getPayPalOrder } from '../lib/paypal';\n\nconst orderRouter = Router();\n\n/**\n * Create a PayPal order\n * POST /paypal/order\n * \n * Request body:\n * - amount: string (required)\n * - currency: string (optional, defaults to 'USD')\n * - description: string (optional)\n */\norderRouter.post('/', async (req, res) => {\n  try {\n    const { amount, currency, description } = req.body;\n    \n    if (!amount) {\n      return res.status(400).json({ error: 'Amount is required' });\n    }\n    \n    const orderId = await createPayPalOrder(amount, currency, description);\n    res.status(200).json({ orderId });\n  } catch (error) {\n    console.error('Error creating PayPal order:', error);\n    res.status(500).json({ error: 'Failed to create PayPal order' });\n  }\n});\n\n/**\n * Capture a PayPal order\n * POST /paypal/order/:orderId/capture\n * \n * Path parameters:\n * - orderId: string (required)\n */\norderRouter.post('/:orderId/capture', async (req, res) => {\n  try {\n    const { orderId } = req.params;\n    \n    if (!orderId) {\n      return res.status(400).json({ error: 'Order ID is required' });\n    }\n    \n    const capture = await capturePayPalOrder(orderId);\n    res.status(200).json(capture);\n  } catch (error) {\n    console.error('Error capturing PayPal order:', error);\n    res.status(500).json({ error: 'Failed to capture PayPal order' });\n  }\n});\n\n/**\n * Get PayPal order details\n * GET /paypal/order/:orderId\n * \n * Path parameters:\n * - orderId: string (required)\n */\norderRouter.get('/:orderId', async (req, res) => {\n  try {\n    const { orderId } = req.params;\n    \n    if (!orderId) {\n      return res.status(400).json({ error: 'Order ID is required' });\n    }\n    \n    const order = await getPayPalOrder(orderId);\n    res.status(200).json(order);\n  } catch (error) {\n    console.error('Error retrieving PayPal order:', error);\n    res.status(500).json({ error: 'Failed to retrieve PayPal order' });\n  }\n});\n\nexport default orderRouter;"
    },
    {
      "path": "packages/templates/express/src/routes/paypal/webhook.ts",
      "target": "src/routes/paypal/webhook.ts",
      "content": "/**\n * PayPal Webhook Routes\n * \n * This file contains routes for handling PayPal webhook events.\n * Webhooks are used to receive real-time notifications about payment events.\n */\n\nimport { Router } from 'express';\nimport { Webhook } from 'standardwebhooks';\n\nconst webhookRouter = Router();\n\n// Initialize webhook handler with PayPal webhook ID from environment variables\nconst webhook = new Webhook(process.env.PAYPAL_WEBHOOK_ID || '');\n\n/**\n * Handle PayPal webhook events\n * POST /paypal/webhook\n * \n * This endpoint receives webhook events from PayPal and processes them accordingly.\n * The request body contains the event data, and the headers contain the signature\n * for verification.\n */\nwebhookRouter.post('/', async (req, res) => {\n  try {\n    // Verify the webhook signature\n    const verified = webhook.verify(\n      JSON.stringify(req.body),\n      req.headers as Record<string, string>\n    );\n    \n    if (!verified) {\n      return res.status(400).json({ error: 'Invalid webhook signature' });\n    }\n    \n    // Process the webhook event\n    const event = req.body;\n    const eventType = event.event_type;\n    \n    switch (eventType) {\n      case 'PAYMENT.CAPTURE.COMPLETED':\n        // Handle successful payment capture\n        console.log('Payment captured:', event);\n        // Update your database, send confirmation emails, etc.\n        break;\n        \n      case 'PAYMENT.CAPTURE.REFUNDED':\n        // Handle payment refund\n        console.log('Payment refunded:', event);\n        // Update your database, notify user, etc.\n        break;\n        \n      case 'BILLING.SUBSCRIPTION.ACTIVATED':\n        // Handle subscription activation\n        console.log('Subscription activated:', event);\n        // Update your database, grant access to premium features, etc.\n        break;\n        \n      case 'BILLING.SUBSCRIPTION.CANCELLED':\n        // Handle subscription cancellation\n        console.log('Subscription cancelled:', event);\n        // Update your database, revoke access to premium features, etc.\n        break;\n        \n      default:\n        console.log('Unhandled PayPal event:', eventType);\n        break;\n    }\n    \n    res.status(200).json({ received: true });\n  } catch (error) {\n    console.error('Error processing PayPal webhook:', error);\n    res.status(500).json({ error: 'Failed to process webhook' });\n  }\n});\n\nexport default webhookRouter;"
    },
    {
      "path": "packages/templates/express/.env.paypal.example",
      "target": ".env.example",
      "content": "NEXT_PUBLIC_APP_URL=http://localhost:3000\nPAYPAL_CLIENT_ID=YOUR-CLIENT-ID\nPAYPAL_CLIENT_SECRET=YOUR-CLIENT-SECRET\nPAYPAL_ENV=sandbox\nPAYPAL_WEBHOOK_ID=YOUR-WEBHOOK-ID"
    }
  ],
  "dependencies": [
    "@paypal/paypal-server-sdk",
    "standardwebhooks",
    "zod",
    "express",
    "@types/express"
  ]
}